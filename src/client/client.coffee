requirejs.config
  baseUrl: "/src/client"
  paths:
    jquery: "../../bower_components/jquery/jquery"
    socketio: "../../bower_components/socket.io-client/dist/socket.io"
    underscore: "../../bower_components/underscore/underscore"
    d3: "../../bower_components/d3/d3"
    guid: "./GUID"
    geometry: "./Geometry"
  shim:
    underscore:
      exports: "_"
    d3:
      exports: "d3"

requirejs ["jquery", "socketio", "guid", "d3", "geometry", "./curvefitting"], ($, io, guid, d3, geo, curvefitting) ->
  svg = d3.select("#svg-wrapper").append("svg:svg")
  canvas = svg.append("svg:g")

  paths = {}
  currentPath = null
  currentPathId = null
  currentPathElement = null

  socket = io.connect()
  socket.on "path", (data) ->
    if paths[data.id]?
      paths[data.id].path = geo.Path.deserialize(data.path)
      paths[data.id].element.attr("d", paths[data.id].path.toSvgPathString())
    else
      newPath = geo.Path.deserialize(data.path)
      newElement = canvas.append("svg:path")
        .attr("fill", "none")
        .attr("stroke", "#000000")
        .attr("stroke-width", 2)
        .attr("d", newPath.toSvgPathString())
      paths[data.id] =
        path: newPath
        element: newElement

  ###
  path = geo.Path.deserialize(JSON.parse('[["M",[120,255]],["L",[121,253]],["L",[123,250]],["L",[126,242]],["L",[129,236]],["L",[130,230]],["L",[135,218]],["L",[137,213]],["L",[144,199]],["L",[146,194]],["L",[151,184]],["L",[154,180]],["L",[158,173]],["L",[160,170]],["L",[166,163]],["L",[169,161]],["L",[175,157]],["L",[177,156]],["L",[180,154]],["L",[184,153]],["L",[187,151]],["L",[193,150]],["L",[196,150]],["L",[203,150]],["L",[206,150]],["L",[211,150]],["L",[214,150]],["L",[220,151]],["L",[224,153]],["L",[226,153]],["L",[232,155]],["L",[236,157]],["L",[239,160]],["L",[240,162]],["L",[244,165]],["L",[246,168]],["L",[249,173]],["L",[249,174]],["L",[252,180]],["L",[253,183]],["L",[255,187]],["L",[255,188]],["L",[255,191]],["L",[255,193]],["L",[255,195]],["L",[254,197]],["L",[252,200]],["L",[252,201]],["L",[249,204]],["L",[247,206]],["L",[246,207]],["L",[245,209]],["L",[243,212]],["L",[240,214]],["L",[240,215]],["L",[239,217]],["L",[237,218]],["L",[236,220]],["L",[234,223]],["L",[232,224]],["L",[229,230]],["L",[229,232]],["L",[226,235]],["L",[225,236]],["L",[223,239]],["L",[223,241]],["L",[221,244]],["L",[220,248]],["L",[218,252]],["L",[218,253]],["L",[217,255]],["L",[217,261]],["L",[217,264]],["L",[216,269]],["L",[216,271]],["L",[216,277]],["L",[216,279]],["L",[216,284]],["L",[217,287]],["L",[217,288]],["L",[220,290]],["L",[221,290]],["L",[223,292]],["L",[226,292]],["L",[233,295]],["L",[237,295]],["L",[243,295]],["L",[247,295]],["L",[254,294]],["L",[258,293]],["L",[261,292]],["L",[266,289]],["L",[272,284]],["L",[274,281]],["L",[277,278]],["L",[280,273]],["L",[282,272]],["L",[284,269]],["L",[286,267]],["L",[290,259]],["L",[292,255]],["L",[296,246]],["L",[297,241]],["L",[300,232]],["L",[301,227]],["L",[303,223]],["L",[306,209]],["L",[306,204]],["L",[307,184]],["L",[307,178]],["L",[307,167]],["L",[307,162]],["L",[307,154]],["L",[308,151]],["L",[311,142]],["L",[312,140]],["L",[314,137]],["L",[316,135]],["L",[317,134]],["L",[321,132]],["L",[324,130]],["L",[328,129]],["L",[329,128]],["L",[334,128]],["L",[335,128]],["L",[340,128]],["L",[343,128]],["L",[347,129]],["L",[354,129]],["L",[359,129]],["L",[368,132]],["L",[373,132]],["L",[378,134]],["L",[390,135]],["L",[398,137]],["L",[402,137]],["L",[405,137]],["L",[406,138]],["L",[407,141]],["L",[409,142]],["L",[409,145]],["L",[410,148]],["L",[412,150]],["L",[412,153]],["L",[412,155]],["L",[414,161]],["L",[414,163]],["L",[414,167]],["L",[414,170]],["L",[414,174]],["L",[414,176]],["L",[414,178]],["L",[415,182]],["L",[415,184]],["L",[415,190]],["L",[415,192]],["L",[415,196]],["L",[415,199]],["L",[414,203]],["L",[414,205]],["L",[414,207]],["L",[413,210]],["L",[412,215]],["L",[412,216]],["L",[412,220]],["L",[411,227]],["L",[411,230]],["L",[410,236]],["L",[409,239]],["L",[408,248]],["L",[407,252]],["L",[406,258]],["L",[404,264]],["L",[403,273]],["L",[402,280]],["L",[400,285]],["L",[398,296]],["L",[397,307]],["L",[397,311]],["L",[397,316]],["L",[395,326]],["L",[395,332]],["L",[394,344]],["L",[394,348]],["L",[392,357]],["L",[392,359]],["L",[392,364]],["L",[392,365]],["L",[392,369]],["L",[392,371]],["L",[392,372]],["L",[392,373]],["L",[392,373]],["L",[390,373]],["L",[389,373]],["L",[387,373]],["L",[380,373]],["L",[377,373]],["L",[366,370]],["L",[363,370]],["L",[361,369]],["L",[359,369]],["L",[356,368]],["L",[355,368]],["L",[353,368]],["L",[350,368]],["L",[347,367]],["L",[344,367]],["L",[341,367]],["L",[335,366]],["L",[330,366]],["L",[320,364]],["L",[314,364]],["L",[299,364]],["L",[294,363]],["L",[281,362]],["L",[273,361]],["L",[258,360]],["L",[253,360]],["L",[249,358]],["L",[240,358]],["L",[233,358]],["L",[229,356]],["L",[226,356]],["L",[219,356]],["L",[218,355]],["L",[213,355]],["L",[210,355]],["L",[201,353]],["L",[198,353]],["L",[191,353]],["L",[187,351]],["L",[181,350]],["L",[164,349]],["L",[155,347]],["L",[138,346]],["L",[131,345]],["L",[107,342]],["L",[100,341]],["L",[90,340]],["L",[86,340]],["L",[84,340]],["L",[83,340]],["L",[81,340]],["L",[76,340]],["L",[75,340]],["L",[73,340]],["L",[71,340]],["L",[70,340]],["L",[68,340]],["L",[67,340]],["L",[67,338]],["L",[67,336]],["L",[67,334]],["L",[69,324]],["L",[69,319]],["L",[69,310]],["L",[69,304]],["L",[69,289]],["L",[69,281]],["L",[69,253]],["L",[69,245]],["L",[69,233]],["L",[69,225]],["L",[69,219]],["L",[69,206]],["L",[69,200]],["L",[69,189]],["L",[69,184]],["L",[69,174]],["L",[69,170]],["L",[69,161]],["L",[69,155]],["L",[70,144]],["L",[71,139]],["L",[71,136]],["L",[72,128]],["L",[72,121]],["L",[74,117]],["L",[74,113]],["L",[74,107]],["L",[74,104]],["L",[75,101]],["L",[75,99]],["L",[75,98]],["L",[75,97]],["L",[75,95]],["L",[75,94]],["L",[75,94]],["L",[76,91]],["L",[77,88]],["L",[78,86]],["L",[79,84]],["L",[79,83]],["L",[79,81]],["L",[79,80]],["L",[80,80]],["L",[83,80]],["L",[89,80]],["L",[92,80]],["L",[95,80]],["L",[103,80]],["L",[108,80]],["L",[115,80]],["L",[121,81]],["L",[145,83]],["L",[153,83]],["L",[168,83]],["L",[175,83]],["L",[188,83]],["L",[193,83]],["L",[197,83]],["L",[203,83]],["L",[209,83]],["L",[212,83]],["L",[214,83]],["L",[221,83]],["L",[226,83]],["L",[241,84]],["L",[249,84]],["L",[280,84]],["L",[289,84]],["L",[307,84]],["L",[317,84]],["L",[333,84]],["L",[338,84]],["L",[344,84]],["L",[353,84]],["L",[357,85]],["L",[374,86]],["L",[380,87]],["L",[392,88]],["L",[398,89]],["L",[408,90]],["L",[413,91]],["L",[416,91]],["L",[422,91]],["L",[424,91]],["L",[426,91]],["L",[427,91]],["L",[428,92]],["L",[429,92]],["L",[431,92]],["L",[437,93]],["L",[438,93]],["L",[443,94]],["L",[446,95]],["L",[450,97]],["L",[452,97]],["L",[454,98]],["L",[457,99]],["L",[460,99]],["L",[462,101]],["L",[465,102]],["L",[467,102]],["L",[473,104]],["L",[479,107]],["L",[481,109]],["L",[487,110]],["L",[489,111]],["L",[491,112]],["L",[491,113]],["L",[493,115]],["L",[494,116]],["L",[497,119]],["L",[498,121]],["L",[502,126]],["L",[504,128]],["L",[505,131]],["L",[505,134]],["L",[506,136]],["L",[507,141]],["L",[508,142]],["L",[508,147]],["L",[508,148]],["L",[508,152]],["L",[508,154]],["L",[508,157]],["L",[508,158]],["L",[508,162]],["L",[508,164]],["L",[508,165]],["L",[508,167]],["L",[508,169]],["L",[506,171]],["L",[505,172]],["L",[503,175]],["L",[502,176]],["L",[499,178]],["L",[498,178]],["L",[494,180]],["L",[491,180]],["L",[487,181]],["L",[484,181]],["L",[481,181]],["L",[479,181]],["L",[477,178]],["L",[477,176]],["L",[475,172]],["L",[475,170]],["L",[475,167]],["L",[475,165]],["L",[475,162]],["L",[476,160]],["L",[477,159]],["L",[479,158]],["L",[483,157]],["L",[484,156]],["L",[489,155]],["L",[491,155]],["L",[497,155]],["L",[499,155]],["L",[502,155]],["L",[504,155]],["L",[507,155]],["L",[509,156]],["L",[512,157]],["L",[516,159]],["L",[520,162]],["L",[521,165]],["L",[524,166]],["L",[526,169]],["L",[526,170]],["L",[528,173]],["L",[529,176]],["L",[532,183]],["L",[533,185]],["L",[533,190]],["L",[533,193]],["L",[533,195]],["L",[534,200]],["L",[534,203]],["L",[534,209]],["L",[534,212]],["L",[534,221]],["L",[534,223]],["L",[533,228]],["L",[533,230]],["L",[531,235]],["L",[530,237]],["L",[529,240]],["L",[527,245]],["L",[523,250]],["L",[521,253]],["L",[519,255]],["L",[516,257]],["L",[513,257]],["L",[507,258]],["L",[505,259]],["L",[496,259]],["L",[493,259]],["L",[489,259]],["L",[487,259]],["L",[484,259]],["L",[482,259]],["L",[481,259]],["L",[480,257]],["L",[479,251]],["L",[479,248]],["L",[480,242]],["L",[481,239]],["L",[483,235]],["L",[486,233]],["L",[495,229]],["L",[497,228]],["L",[503,227]],["L",[504,227]],["L",[507,227]],["L",[511,229]],["L",[512,230]],["L",[517,233]],["L",[519,236]],["L",[526,245]],["L",[529,249]],["L",[532,255]],["L",[535,258]],["L",[536,262]],["L",[537,263]],["L",[537,265]],["L",[537,270]],["L",[537,277]],["L",[537,280]],["L",[536,283]],["L",[535,287]],["L",[535,290]],["L",[534,295]],["L",[533,298]],["L",[530,307]],["L",[529,311]],["L",[526,320]],["L",[525,323]],["L",[523,326]],["L",[521,330]],["L",[520,331]],["L",[517,334]],["L",[517,335]],["L",[512,338]],["L",[510,338]],["L",[507,339]],["L",[506,339]],["L",[503,339]],["L",[500,339]],["L",[497,337]],["L",[493,335]],["L",[489,331]],["L",[486,330]],["L",[484,328]],["L",[482,326]],["L",[482,325]],["L",[481,323]],["L",[481,322]],["L",[481,319]],["L",[481,318]],["L",[481,316]],["L",[483,314]],["L",[484,313]],["L",[486,313]],["L",[487,311]],["L",[492,311]],["L",[495,311]],["L",[500,311]],["L",[502,311]],["L",[506,314]],["L",[509,316]],["L",[514,321]],["L",[516,322]],["L",[520,325]],["L",[521,327]],["L",[523,330]],["L",[523,331]],["L",[523,333]],["L",[523,335]],["L",[523,336]],["L",[523,339]],["L",[523,342]],["L",[523,346]],["L",[523,347]],["L",[522,350]],["L",[520,352]],["L",[517,357]],["L",[516,359]],["L",[515,361]],["L",[512,366]],["L",[508,371]],["L",[505,374]],["L",[503,377]],["L",[499,382]],["L",[496,385]],["L",[492,389]],["L",[489,391]],["L",[488,392]],["L",[485,393]],["L",[482,393]],["L",[479,393]],["L",[477,394]],["L",[475,394]],["L",[474,394]],["L",[471,394]],["L",[470,393]],["L",[469,393]],["L",[469,391]],["L",[467,389]],["L",[467,388]],["L",[465,385]],["L",[464,383]],["L",[464,381]],["L",[464,379]],["L",[464,377]],["L",[465,376]],["L",[465,375]],["L",[465,374]],["L",[467,373]],["L",[468,372]],["L",[470,372]],["L",[471,372]],["L",[472,372]],["L",[474,372]],["L",[476,372]],["L",[480,374]],["L",[482,375]],["L",[484,377]],["L",[485,377]],["L",[486,379]],["L",[487,381]],["L",[488,384]],["L",[489,384]],["L",[489,386]],["L",[489,387]],["L",[489,388]],["L",[490,390]],["L",[490,392]],["L",[490,395]],["L",[490,397]],["L",[490,400]],["L",[490,401]],["L",[490,404]],["L",[490,406]],["L",[490,408]],["L",[490,409]],["L",[490,412]],["L",[490,412]],["L",[490,415]],["L",[490,417]],["L",[489,419]],["L",[489,421]],["L",[488,423]],["L",[488,424]],["L",[485,427]],["L",[485,427]],["L",[483,429]],["L",[483,430]],["L",[482,431]],["L",[480,432]],["L",[479,433]],["L",[477,435]],["L",[475,435]],["L",[472,437]],["L",[471,438]],["L",[468,438]],["L",[466,438]],["L",[463,439]],["L",[462,440]],["L",[460,440]],["L",[457,441]],["L",[454,441]],["L",[453,441]],["L",[451,442]],["L",[448,442]],["L",[447,442]],["L",[442,442]],["L",[439,442]],["L",[434,442]],["L",[431,442]],["L",[428,442]],["L",[425,442]],["L",[422,442]],["L",[420,442]],["L",[419,442]],["L",[416,442]],["L",[414,442]],["L",[413,442]],["L",[411,442]],["L",[411,442]]]'))
  canvas.append("svg:path")
    .attr("fill", "none")
    .attr("stroke", "#ff0000")
    .attr("stroke-width", 1)
    .attr("d", path.toSvgPathString())
  points = curvefitting(_.map(path.segments, (segment) -> segment[1]), 2.5)
  path2 = new geo.Path(points[0])
  for i in [1..points.length-1] by 3
    path2.cubicBezierCurveTo(points[i], points[i+1], points[i+2])
  console.log "CUBICS", (points.length-2) / 3
  canvas.append("svg:path")
    .attr("fill", "none")
    .attr("stroke", "#0000ff")
    .attr("stroke-width", 4)
    .attr("d", path2.toSvgPathString())
  ###

  # disable right click
  $(window).contextmenu (event) ->
    event.preventDefault()

  onResize = () ->
    width = $(window).width()
    height = $(window).height()
    svg
      .attr("width", width)
      .attr("height", height)

  $(window).resize (event) -> onResize()
  onResize()

  $(window).mousedown (event) ->
    if not currentPath?
      currentPath = new geo.Path(new geo.Vector(event.clientX, event.clientY))
      currentPathId = guid.create()
      currentPathElement = canvas.append("svg:path")
        .attr("fill", "none")
        .attr("stroke", "#ff0000")
        .attr("stroke-width", 1)
        .attr("d", currentPath.toSvgPathString())
      paths[currentPathId] =
        path: currentPath
        element: currentPathElement

      socket.emit "path", {
        id: currentPathId,
        path: geo.Path.serialize(currentPath)
      }

  $(window).mouseup (event) ->
    if currentPath?
      currentPath.lineTo(new geo.Vector(event.clientX, event.clientY))
      currentPathElement.attr("d", currentPath.toSvgPathString())

      points = curvefitting(_.map(currentPath.segments, (segment) -> segment[1]), 2.0)
      path2 = new geo.Path(points[0])
      for i in [1..points.length-1] by 3
        path2.cubicBezierCurveTo(points[i], points[i+1], points[i+2])
      console.log "CUBICS", (points.length-1) / 3
      canvas.append("svg:path")
        .attr("fill", "none")
        .attr("stroke", "#00ff00")
        .attr("stroke-width", 1)
        .attr("d", path2.toSvgPathString())
      for p in points
        console.log p
        canvas.append("svg:circle")
          .attr("fill", "black")
          .attr("r", 1)
          .attr("cx", p.x)
          .attr("cy", p.y)

      socket.emit "path", {
        id: currentPathId,
        path: geo.Path.serialize(currentPath)
      }

      currentPath = null
      currentPathId = null
      currentPathElement = null

  $(window).mousemove (event) ->
    if currentPath?
      currentPath.lineTo(new geo.Vector(event.clientX, event.clientY))
      currentPathElement.attr("d", currentPath.toSvgPathString())

      socket.emit "path", {
        id: currentPathId,
        path: geo.Path.serialize(currentPath)
      }
